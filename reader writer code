#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

sem_t rmutex, wmutex;
int readcount = 0;

void* Reader(void *arg) {
    sem_wait(&rmutex);
    readcount++;
    if (readcount == 1)
        sem_wait(&wmutex);  // First reader locks the writer
    sem_post(&rmutex);

    // Reading section
    printf("\nReader is reading");

    sem_wait(&rmutex);
    readcount--;
    if (readcount == 0)
        sem_post(&wmutex);  // Last reader unlocks the writer
    sem_post(&rmutex);

    return NULL;
}

void* Writer(void *arg) {
    sem_wait(&wmutex);

    // Writing section
    printf("\nWriter is writing");

    sem_post(&wmutex);
    return NULL;
}

int main() {
    pthread_t reader[3], writer[3];
    sem_init(&rmutex, 0, 1);
    sem_init(&wmutex, 0, 1);

    for (int i = 0; i < 3; i++) {
        pthread_create(&reader[i], NULL, Reader, NULL);
        pthread_create(&writer[i], NULL, Writer, NULL);
    }

    for (int i = 0; i < 3; i++) {
        pthread_join(reader[i], NULL);
        pthread_join(writer[i], NULL);
    }

    sem_destroy(&rmutex);
    sem_destroy(&wmutex);

    return 0;
}
